# You can override the included template(s) by including variable overrides
# See https://docs.gitlab.com/ee/user/application_security/sast/#customizing-the-sast-settings
# Note that environment variables can be set in several places
# See https://docs.gitlab.com/ee/ci/variables/#priority-of-environment-variables
stages:
- compile
- test
- build
compile_backend:
  stage: compile
  image: node:latest
  script:
    - npm i --dev
    - npm run build
  artifacts:
    paths:
      - backend/dist
test:
  stage: test
  image: node:latest
  services:
  - mongo:latest
  script:
  - cd backend
  - npm i
  - cp $config ./config.js
  - npm run test
  dependencies:
    - compile_backend
sast:
  variables:
    SAST_EXCLUDED_PATHS: test
    SAST_DEFAULT_ANALYZERS: brakeman, bandit, eslint, flawfinder, kubesec, nodejs-scan,
      gosec, phpcs-security-audit, pmd-apex, security-code-scan, sobelow, spotbugs
  stage: test
  dependencies:
    - compile_backend
build_backend:
  image: docker:19.03.11
  stage: build
  services:
  - docker:19.03.11-dind
  variables:
    IMAGE_TAG: "$CI_REGISTRY_IMAGE:$CI_COMMIT_REF_SLUG"
  script:
  - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
  - docker build -t $IMAGE_TAG ./backend
  - docker push $IMAGE_TAG
  dependencies:
    - compile_backend
build_frontend:
  image: docker:19.03.11
  stage: build
  services:
  - docker:19.03.11-dind
  variables:
    IMAGE_TAG: "$CI_REGISTRY_IMAGE/nuxt_frontend:$CI_COMMIT_REF_SLUG"
  script:
  - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
  - docker build -t $IMAGE_TAG ./nuxt_frontend
  - docker push $IMAGE_TAG
  dependencies:
    - compile_backend
include:
- template: Security/SAST.gitlab-ci.yml
- template: Dependency-Scanning.gitlab-ci.yml
- template: Security/Secret-Detection.gitlab-ci.yml
